#!/usr/bin/env bash

_program()
{
    core_usesIn curl
    core_usesIn jsonwriter

    wercker_step_hipchat_notify()
    {
        local curl_httpStatusCode
        local TMP_FILE
        local responseFile
        local curl_uploadFile
        local url

        core_temporaryFiles_newFileToRemoveOnExit
        responseFile=$TMP_FILE
        core_temporaryFiles_newFileToRemoveOnExit
        curl_uploadFile=$TMP_FILE

        url="https://api.hipchat.com/v2/room/${WERCKER_HIPCHAT_NOTIFY_ROOM_ID}/notification"

        jsonwriter_object string color "$WERCKER_HIPCHAT_NOTIFY_COLOR" \
            string message_format "$WERCKER_HIPCHAT_NOTIFY_MESSAGE_FORMAT" \
            string notify "$WERCKER_HIPCHAT_NOTIFY_NOTIFY" \
            string message "$WERCKER_HIPCHAT_NOTIFY_MESSAGE" >"$curl_uploadFile"

        curl_http none '' POST $url  "$responseFile" Content-Type application/json Authorization "Bearer $WERCKER_HIPCHAT_NOTIFY_TOKEN"

        cat "$responseFile"
        printf "\n$curl_httpStatusCode\n"
    }
}

_program_name='wercker_step_hipchat_notify'
_program_version='1.0.6'
_program_package_or_build=''
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='wercker_step_hipchat_notify'

_program_commandLine_parseInitialise()
{
    if core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_FAILED_MESSAGE"; then
        if core_variable_isUnsetOrEmpty "DEPLOY"; then
            WERCKER_HIPCHAT_NOTIFY_FAILED_MESSAGE="<a href="$WERCKER_APPLICATION_URL">$WERCKER_APPLICATION_OWNER_NAME/$WERCKER_APPLICATION_NAME</a>: <a href="$WERCKER_BUILD_URL">build</a> of $WERCKER_GIT_COMMIT ($WERCKER_GIT_BRANCH) by $WERCKER_STARTED_BY failed."
        else
            WERCKER_HIPCHAT_NOTIFY_FAILED_MESSAGE="<a href="$WERCKER_APPLICATION_URL">$WERCKER_APPLICATION_OWNER_NAME/$WERCKER_APPLICATION_NAME</a>: <a href="$WERCKER_DEPLOY_URL">deploy</a> to $WERCKER_DEPLOYTARGET_NAME by $WERCKER_STARTED_BY failed."
        fi
    fi

    if core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_PASSED_MESSAGE"; then
        if core_variable_isUnsetOrEmpty "DEPLOY"; then
            WERCKER_HIPCHAT_NOTIFY_PASSED_MESSAGE="<a href="$WERCKER_APPLICATION_URL">$WERCKER_APPLICATION_OWNER_NAME/$WERCKER_APPLICATION_NAME</a>: <a href="$WERCKER_BUILD_URL">build</a> of $WERCKER_GIT_COMMIT ($WERCKER_GIT_BRANCH) by $WERCKER_STARTED_BY passed."
        else
            WERCKER_HIPCHAT_NOTIFY_PASSED_MESSAGE="<a href="$WERCKER_APPLICATION_URL">$WERCKER_APPLICATION_OWNER_NAME/$WERCKER_APPLICATION_NAME</a>: <a href="$WERCKER_DEPLOY_URL">deploy</a> to $WERCKER_DEPLOYTARGET_NAME by $WERCKER_STARTED_BY passed."
        fi
    fi

    if core_variable_matches "$WERCKER_RESULT" "passed"; then
        WERCKER_HIPCHAT_NOTIFY_MESSAGE="$WERCKER_HIPCHAT_NOTIFY_PASSED_MESSAGE"
        WERCKER_HIPCHAT_NOTIFY_COLOR="$WERCKER_HIPCHAT_NOTIFY_PASSED_COLOR"
        WERCKER_HIPCHAT_NOTIFY_NOTIFY="$WERCKER_HIPCHAT_NOTIFY_PASSED_NOTIFY"
    else
        WERCKER_HIPCHAT_NOTIFY_MESSAGE="$WERCKER_HIPCHAT_NOTIFY_FAILED_MESSAGE"
        WERCKER_HIPCHAT_NOTIFY_COLOR="$WERCKER_HIPCHAT_NOTIFY_FAILED_COLOR"
        WERCKER_HIPCHAT_NOTIFY_NOTIFY="$WERCKER_HIPCHAT_NOTIFY_FAILED_NOTIFY"
    fi

    if core_variable_isSet "WERCKER_HIPCHAT_NOTIFY_ON" && core_variable_matches "$WERCKER_HIPCHAT_NOTIFY_ON" "failed"; then
        if core_variable_matches "$WERCKER_RESULT" "passed"; then
            echo "Skipping..."
            exit 0
        fi
    fi


    true
}

_program_commandLine_validate()
{
    core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_TOKEN" && core_exitError $core_commandLine_exitCode_USAGE "Token option is mandatory"
    core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_ROOM_ID" && core_exitError $core_commandLine_exitCode_USAGE "Room Id option is mandatory"
    core_variable_isUnsetOrEmpty "WERCKER_APPLICATION_URL" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_APPLICATION_URL is not set"
    core_variable_isUnsetOrEmpty "WERCKER_APPLICATION_OWNER_NAME" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_APPLICATION_OWNER_NAME is not set"
    core_variable_isUnsetOrEmpty "WERCKER_APPLICATION_NAME" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_APPLICATION_NAME is not set"
    core_variable_isUnsetOrEmpty "WERCKER_STARTED_BY" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_STARTED_BY is not set"
    core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_PASSED_COLOR" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_HIPCHAT_NOTIFY_PASSED_COLOR is not set"
    core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_FAILED_COLOR" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_HIPCHAT_NOTIFY_FAILED_COLOR is not set"
    core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_FAILED_NOTIFY" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_HIPCHAT_NOTIFY_FAILED_NOTIFY is not set"
    core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_PASSED_NOTIFY" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_HIPCHAT_NOTIFY_PASSED_NOTIFY is not set"
    core_variable_isUnsetOrEmpty "WERCKER_HIPCHAT_NOTIFY_MESSAGE_FORMAT" && core_exitError $core_commandLine_exitCode_USAGE "WERCKER_HIPCHAT_NOTIFY_MESSAGE_FORMAT is not set"
    true
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
